@page "/postlist2"
@inject IPostService postService

<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

<style>
    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }

    .btn-custom {
        color: black;
        float: left;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
        border: 2px solid #000;
        margin: 0px 5px 0px 5px;
    }

    .truncate {
        font-size: 15px;
        width: 100%;
        /**Major Properties**/
        overflow: hidden;
        line-height: 1.5rem;
        max-height: 8rem;
        -webkit-box-orient: vertical;
        display: block;
        display: -webkit-box;
        overflow: hidden !important;
        -webkit-line-clamp: 3;
    }
</style>


<div>
    <a class="btn btn-success float-right" href='/myposts'>View my Posts</a>
</div>
<br />

@if (postModel == null)
{
    <button class="btn btn-primary" disabled>
        <span class="spinner-border spinner-border-sm"></span>
        Loading..
    </button>
}
else
{
<section id="blog" class="blog space100">
    <div class="container" style="min-width:100%; padding-left:15%;">
        @if (postModel == null || postModel.Count == 0)
        {
            <p>There are no posts available</p>
        }

        else
        {


            <!-- ======= Blog Section ======= -->


            @foreach (var tka in postModel)
            {



                <div class="row">

                    <div class="col-lg-8 entries">

                        <div class="row">
                            <div class="col-md-12 align-items-stretch">
                                <article class="entry">

                                    <!--   <div class="entry-img">
                                            <img src="/img/slide/slide-1.jpg" alt="" class="img-fluid">
                                        </div>
                                    -->

                                    <h2 class="entry-title">
                                        <a href="blog-single.html">@tka.Title</a>
                                    </h2>

                                    <div class="entry-meta">
                                        <ul>
                                            <li class="d-flex align-items-center"><i class="icofont-user"></i> <a href="blog-single.html">John Doe</a></li>
                                            <li class="d-flex align-items-center"><i class="icofont-wall-clock"></i> <a href="blog-single.html"><time datetime="2020-01-01">Jan 1, 2020</time></a></li>
                                        </ul>
                                    </div>

                                    <div class="entry-content">
                                        <p>
                                            <div class="card-text truncate">@tka.Description</div>
                                        </p>
                                        <div class="read-more">
                                            <a href="href='/postDetails/@tka.PostId'">Read More</a>
                                        </div>
                                    </div>

                                </article><!-- End blog entry -->
                            </div>
                        </div>
                    </div>
                </div>


            }

        }
        <div class="pagination" style="margin-left:27%;">
            <button class="btn btn-custom" @onclick=@(async () => await NavigateToPage("previous"))>Prev</button>

            @for (int i = startPage; i <= endPage; i++)
            {
                var currentPage = i;
                <button class="btn btn-custom pagebutton @(currentPage == curPage ? "btn-danger" : "")" @onclick=@(async () => await refreshRecords(currentPage))>
                    @currentPage
                </button>
            }

            <button class="btn btn-custom" @onclick=@(async () => await NavigateToPage("next"))>Next</button>

        </div>

    </div>
</section>
        }
   

    @code {
private string searchTerm;
    private string SearchTerm
    {
        get { return searchTerm; }
        set { searchTerm = value; FilterRecords(); }
    }

    List<TKAPosts> postModel;
    TKAPosts postEntity = new TKAPosts();


    #region Pagination

    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;
    string sortColumnName = "PostId";
    string sortDir = "DESC";

    #endregion

    protected override async Task OnInitializedAsync()
    {
        //display total page buttons
        pagerSize = 3;
        pageSize = 5;
        curPage = 1;
        postModel = await postService.ListAllPosts((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        totalRecords = await postService.CountPost(searchTerm);
        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        SetPagerSize("forward");
    }


    protected async Task DeletePost(int id)
    {
        await postService.DeletePost(id);
        postModel = await postService.ListAllPosts((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
    }

    private bool isSortedAscending;
    private string activeSortColumn;

    private async Task<List<TKAPosts>> SortRecords(string columnName, string dir)
    {
        return await postService.ListAllPosts((curPage - 1) * pageSize, pageSize, columnName, dir, searchTerm);
    }

    private async Task SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            postModel = await SortRecords(columnName, "ASC");
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                postModel = await SortRecords(columnName, "DESC");
            }
            else
            {
                postModel = await SortRecords(columnName, "ASC");
            }

            isSortedAscending = !isSortedAscending;
        }
        sortColumnName = columnName;
        sortDir = isSortedAscending ? "ASC" : "DESC";
    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    public async Task refreshRecords(int currentPage)
    {
        postModel = await postService.ListAllPosts((currentPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        curPage = currentPage;
        this.StateHasChanged();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        else
        {
            startPage = 1;
            endPage = totalPages;
        }
    }

    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await refreshRecords(curPage);
    }

    public void FilterRecords()
    {
        endPage = 0;
        this.OnInitializedAsync().Wait();
    }

    }
